{"remainingRequest":"D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\babel-loader\\lib\\index.js!D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Programs\\Project\\GSL-IOT\\web\\src\\view\\example\\breakpoint\\breakpoint.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Programs\\Project\\GSL-IOT\\web\\src\\view\\example\\breakpoint\\breakpoint.vue","mtime":1600866450000},{"path":"D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["breakpoint.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"hello\">\n     <el-divider content-position=\"left\">大文件上传</el-divider>\n    <form id=\"fromCont\" method=\"post\" >\n      <div class=\"fileUpload\" @click=\"inputChange\">\n        选择文件\n        <input v-show=\"false\"  @change=\"choseFile\" id=\"file\" multiple=\"multiple\" type=\"file\" ref=\"Input\"  />\n      </div>\n    </form>\n     <el-button @click=\"getFile\" :disabled=\"limitFileSize\" type=\"primary\" size=\"medium\" class=\"uploadBtn\">上传文件</el-button>\n    <div class=\"el-upload__tip\">请上传不超过5MB的文件</div>\n    <div class=\"list\">\n      <transition  name=\"list\" tag=\"p\">\n        <div class=\"list-item\" v-if=\"file\" >\n          <i class=\"el-icon-document\"></i>\n          <span>{{ file.name }}</span>\n          <span class=\"percentage\" >{{percentage}}%</span>\n          <el-progress  :show-text='false' :text-inside=\"false\" :stroke-width=\"2\" :percentage=\"percentage\"></el-progress>\n        </div> \n      </transition>\n   </div>\n     <!-- <span\n      v-if=\"this.file\"\n    >{{Math.floor(((this.formDataList.length-this.waitNum)/this.formDataList.length)*100)}}%</span> -->\n    <div class=\"tips\">此版本为先行体验功能测试版，样式美化和性能优化正在进行中，上传切片文件和合成的完整文件分别再QMPlusserver目录的breakpointDir文件夹和fileDir文件夹</div>\n  </div>\n</template>\n<script>\nimport SparkMD5 from 'spark-md5'\nimport axios from 'axios'\nimport {\n  findFile,\n  breakpointContinueFinish,\n  removeChunk\n} from '@/api/breakpoint'\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      file: null,\n      fileMd5: '',\n      formDataList: [],\n      waitUpLoad: [],\n      waitNum: 0,\n      limitFileSize: false,\n      percentage:0,\n      percentageFlage: true,\n      customColor: '#409eff'\n    }\n  },\n  created(){\n   \n  },\n  methods: {\n    // 选中文件的函数\n    async choseFile(e) {\n      const fileR = new FileReader() // 创建一个reader用来读取文件流\n      const file = e.target.files[0] // 获取当前文件\n      const maxSize = 5*1024*1024\n      this.file = file // file 丢全局方便后面用 可以改进为func传参形式\n      this.percentage = 0\n    if(file.size<maxSize){\n      fileR.readAsArrayBuffer(file) // 把文件读成ArrayBuffer  主要为了保持跟后端的流一致\n      fileR.onload = async e => {\n        // 读成arrayBuffer的回调 e 为方法自带参数 相当于 dom的e 流存在e.target.result 中\n        const blob = e.target.result\n        let spark = new SparkMD5.ArrayBuffer() // 创建md5制造工具 （md5用于检测文件一致性 这里不懂就打电话问我）\n        spark.append(blob) // 文件流丢进工具\n        this.fileMd5 = spark.end() // 工具结束 产生一个a 总文件的md5\n        const FileSliceCap = 1 * 1024 * 1024 // 分片字节数\n        let start = 0 // 定义分片开始切的地方\n        let end = 0 // 每片结束切的地方a\n        let i = 0 // 第几片\n        this.formDataList = [] // 分片存储的一个池子 丢全局\n        while (end < file.size) {\n          // 当结尾数字大于文件总size的时候 结束切片\n          start = i * FileSliceCap // 计算每片开始位置\n          end = (i + 1) * FileSliceCap // 计算每片结束位置\n          var fileSlice = this.file.slice(start, end) // 开始切  file.slice 为 h5方法 对文件切片 参数为 起止字节数\n          const formData = new window.FormData() // 创建FormData用于存储传给后端的信息\n          formData.append('fileMd5', this.fileMd5) // 存储总文件的Md5 让后端知道自己是谁的切片\n          formData.append('file', fileSlice) //当前的切片\n          formData.append('chunkNumber', i) // 当前是第几片\n          formData.append('fileName', this.file.name) //当前文件的文件名 用于后端文件切片的命名  formData.appen 为 formData对象添加参数的方法\n          this.formDataList.push({ key: i, formData }) // 把当前切片信息 自己是第几片 存入我们方才准备好的池子\n          i++\n        }\n        const params = {\n          fileName: this.file.name,\n          fileMd5: this.fileMd5,\n          chunkTotal: this.formDataList.length\n        }\n        const res = await findFile(params)\n        // 全部切完以后 发一个请求给后端 拉当前文件后台存储的切片信息 用于检测有多少上传成功的切片\n        const finishList = res.data.file.ExaFileChunk // 上传成功的切片\n        const IsFinish = res.data.file.IsFinish // 是否是同文件不同命 （文件md5相同 文件名不同 则默认是同一个文件但是不同文件名 此时后台数据库只需要拷贝一下数据库文件即可 不需要上传文件 即秒传功能）\n        if (!IsFinish) {\n          // 当是断点续传时候\n          this.waitUpLoad = this.formDataList.filter(all => {\n            return !(\n              finishList &&\n              finishList.some(fi => fi.FileChunkNumber === all.key)\n            ) // 找出需要上传的切片\n          })\n        } else {\n          this.waitUpLoad = [] // 秒传则没有需要上传的切片\n        }\n        this.waitNum = this.waitUpLoad.length // 记录长度用于百分比展示\n      }\n      } else {\n         this.limitFileSize = true\n         this.$message('请上传小于5M文件')\n      }\n    },\n    getFile() {\n      // 确定按钮\n      if (this.file == null) {\n        this.$message('请先上传文件')\n        return\n      }\n      this.percentage = Math.floor(((this.formDataList.length-this.waitNum)/this.formDataList.length)*100)\n      if(this.percentage == 100){\n        this.percentageFlage = false\n      }\n      this.sliceFile() // 上传切片\n    },\n    sliceFile() {\n      this.waitUpLoad &&\n        this.waitUpLoad.map(item => {\n          //需要上传的切片\n          item.formData.append('chunkTotal', this.formDataList.length) // 切片总数携带给后台 总有用的\n          const fileR = new FileReader() // 功能同上\n          const file = item.formData.get('file')\n          fileR.readAsArrayBuffer(file)\n          fileR.onload = e => {\n            let spark = new SparkMD5.ArrayBuffer()\n            spark.append(e.target.result)\n            item.formData.append('chunkMd5', spark.end()) // 获取当前切片md5 后端用于验证切片完整性\n            this.upLoadFileSlice(item)\n          }\n        })\n    },\n    async upLoadFileSlice(item) {\n      // 切片上传\n      await axios.post(process.env.VUE_APP_BASE_API+\"/fileUploadAndDownload/breakpointContinue\",item.formData)\n      this.waitNum-- // 百分数增加\n      if (this.waitNum == 0) {\n        // 切片传完以后 合成文件\n        const params = {\n          fileName: this.file.name,\n          fileMd5: this.fileMd5\n        }\n        const res = await breakpointContinueFinish(params)\n        if (res.success) {\n          // 合成文件过后 删除缓存切片\n          const params = {\n            fileName: this.file.name,\n            fileMd5: this.fileMd5,\n            filePath: res.data.filePath\n          }\n          await removeChunk(params)\n        }\n      }\n    },\n    inputChange(){\n      this.$refs.Input.dispatchEvent(new MouseEvent('click'))\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n#fromCont{\n  display: inline-block;\n}\n.fileUpload{\n    padding: 4px 10px;\n    height: 20px;\n    line-height: 20px;\n    position: relative;\n    cursor: pointer;\n    color: #000;\n    border: 1px solid #c1c1c1;\n    border-radius: 4px;\n    overflow: hidden;\n    display: inline-block;\n    input{\n      position: absolute;\n      font-size: 100px;\n      right: 0;\n      top: 0;\n      opacity: 0;\n      cursor: pointer;\n    }\n}\n .fileName{\n    display: inline-block;\n    vertical-align: top;\n    margin: 6px 15px 0 15px;\n  }\n  .uploadBtn{\n    position: relative;\n    top: -10px;\n    margin-left: 15px;\n  }\n  .tips{\n    margin-top: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: #606266;\n  }\n  .el-divider{\n    margin: 0 0 30px 0;\n  }\n \n .list{\n   margin-top:15px;\n }\n .list-item {\n  display: block;\n  margin-right: 10px;\n  color: #606266;\n  line-height: 25px;\n  margin-bottom: 5px;\n  width: 40%;\n   .percentage{\n          float: right;\n        }\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-to\n/* .list-leave-active for below version 2.1.8 */ {\n  opacity: 0;\n  transform: translateY(-30px);\n}\n</style>"],"sourceRoot":"src/view/example/breakpoint"}]}