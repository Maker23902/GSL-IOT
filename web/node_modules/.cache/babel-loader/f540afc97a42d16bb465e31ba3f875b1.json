{"remainingRequest":"D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\babel-loader\\lib\\index.js!D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Programs\\Project\\GSL-IOT\\web\\src\\view\\superAdmin\\authority\\components\\apis.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Programs\\Project\\GSL-IOT\\web\\src\\view\\superAdmin\\authority\\components\\apis.vue","mtime":1605233962998},{"path":"D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605233951981},{"path":"D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\babel-loader\\lib\\index.js","mtime":1605233951045},{"path":"D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605233951981},{"path":"D:\\Programs\\Project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1605233962282}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiRDovUHJvZ3JhbXMvUHJvamVjdC9HU0wtSU9UL3dlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiRDovUHJvZ3JhbXMvUHJvamVjdC9HU0wtSU9UL3dlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBnZXRBbGxBcGlzIH0gZnJvbSAnQC9hcGkvYXBpJzsKaW1wb3J0IHsgVXBkYXRlQ2FzYmluLCBnZXRQb2xpY3lQYXRoQnlBdXRob3JpdHlJZCB9IGZyb20gJ0AvYXBpL2Nhc2Jpbic7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQXBpcycsCiAgcHJvcHM6IHsKICAgIHJvdzogewogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4ge307CiAgICAgIH0sCiAgICAgIHR5cGU6IE9iamVjdAogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGFwaVRyZWVEYXRhOiBbXSwKICAgICAgYXBpVHJlZUlkczogW10sCiAgICAgIG5lZWRDb25maXJtOiBmYWxzZSwKICAgICAgYXBpRGVmYXVsdFByb3BzOiB7CiAgICAgICAgY2hpbGRyZW46ICdjaGlsZHJlbicsCiAgICAgICAgbGFiZWw6ICdkZXNjcmlwdGlvbicKICAgICAgfQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIG5vZGVDaGFuZ2U6IGZ1bmN0aW9uIG5vZGVDaGFuZ2UoKSB7CiAgICAgIHRoaXMubmVlZENvbmZpcm0gPSB0cnVlOwogICAgfSwKICAgIC8vIOaatOmcsue7meWkluWxguS9v+eUqOeahOWIh+aNouaLpuaIque7n+S4gOaWueazlQogICAgZW50ZXJBbmROZXh0OiBmdW5jdGlvbiBlbnRlckFuZE5leHQoKSB7CiAgICAgIHRoaXMuYXV0aEFwaUVudGVyKCk7CiAgICB9LAogICAgLy8g5Yib5bu6YXBp5qCR5pa55rOVCiAgICBidWlsZEFwaVRyZWU6IGZ1bmN0aW9uIGJ1aWxkQXBpVHJlZShhcGlzKSB7CiAgICAgIHZhciBhcGlPYmogPSBuZXcgT2JqZWN0KCk7CiAgICAgIGFwaXMgJiYgYXBpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICBpdGVtLm9ubHlJZCA9ICJwOiIgKyBpdGVtLnBhdGggKyAibToiICsgaXRlbS5tZXRob2Q7CgogICAgICAgIGlmIChhcGlPYmouaGFzT3duUHJvcGVydHkoaXRlbS5hcGlHcm91cCkpIHsKICAgICAgICAgIGFwaU9ialtpdGVtLmFwaUdyb3VwXS5wdXNoKGl0ZW0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBPYmplY3QuYXNzaWduKGFwaU9iaiwgX2RlZmluZVByb3BlcnR5KHt9LCBpdGVtLmFwaUdyb3VwLCBbaXRlbV0pKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICB2YXIgYXBpVHJlZSA9IFtdOwoKICAgICAgZm9yICh2YXIga2V5IGluIGFwaU9iaikgewogICAgICAgIHZhciB0cmVlTm9kZSA9IHsKICAgICAgICAgIElEOiBrZXksCiAgICAgICAgICBkZXNjcmlwdGlvbjoga2V5ICsgJ+e7hCcsCiAgICAgICAgICBjaGlsZHJlbjogYXBpT2JqW2tleV0KICAgICAgICB9OwogICAgICAgIGFwaVRyZWUucHVzaCh0cmVlTm9kZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBhcGlUcmVlOwogICAgfSwKICAgIC8vIOWFs+iBlOWFs+ezu+ehruWumgogICAgYXV0aEFwaUVudGVyOiBmdW5jdGlvbiBhdXRoQXBpRW50ZXIoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBjaGVja0FyciwgY2FzYmluSW5mb3MsIHJlczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjaGVja0FyciA9IF90aGlzLiRyZWZzLmFwaVRyZWUuZ2V0Q2hlY2tlZE5vZGVzKHRydWUpOwogICAgICAgICAgICAgICAgY2FzYmluSW5mb3MgPSBbXTsKICAgICAgICAgICAgICAgIGNoZWNrQXJyICYmIGNoZWNrQXJyLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICB2YXIgY2FzYmluSW5mbyA9IHsKICAgICAgICAgICAgICAgICAgICBwYXRoOiBpdGVtLnBhdGgsCiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBpdGVtLm1ldGhvZAogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICBjYXNiaW5JbmZvcy5wdXNoKGNhc2JpbkluZm8pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBVcGRhdGVDYXNiaW4oewogICAgICAgICAgICAgICAgICBhdXRob3JpdHlJZDogX3RoaXMuYWN0aXZlVXNlcklkLAogICAgICAgICAgICAgICAgICBjYXNiaW5JbmZvczogY2FzYmluSW5mb3MKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChyZXMuY29kZSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzLiRtZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogImFwaeiuvue9ruaIkOWKnyIKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIHJlczIsIGFwaXMsIHJlczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGdldEFsbEFwaXMoKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXMyID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgYXBpcyA9IHJlczIuZGF0YS5hcGlzOwogICAgICAgICAgICAgIF90aGlzMi5hcGlUcmVlRGF0YSA9IF90aGlzMi5idWlsZEFwaVRyZWUoYXBpcyk7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICAgIHJldHVybiBnZXRQb2xpY3lQYXRoQnlBdXRob3JpdHlJZCh7CiAgICAgICAgICAgICAgICBhdXRob3JpdHlJZDogX3RoaXMyLnJvdy5hdXRob3JpdHlJZAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIF90aGlzMi5hY3RpdmVVc2VySWQgPSBfdGhpczIucm93LmF1dGhvcml0eUlkOwogICAgICAgICAgICAgIF90aGlzMi5hcGlUcmVlSWRzID0gW107CiAgICAgICAgICAgICAgcmVzLmRhdGEucGF0aHMgJiYgcmVzLmRhdGEucGF0aHMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICBfdGhpczIuYXBpVHJlZUlkcy5wdXNoKCJwOiIgKyBpdGVtLnBhdGggKyAibToiICsgaXRlbS5tZXRob2QpOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSgpOwogIH0KfTs="},{"version":3,"sources":["apis.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"clearflex\">\r\n      <el-button @click=\"authApiEnter\" class=\"fl-right\" size=\"small\" type=\"primary\">确 定</el-button>\r\n    </div>\r\n    <el-tree\r\n      :data=\"apiTreeData\"\r\n      :default-checked-keys=\"apiTreeIds\"\r\n      :props=\"apiDefaultProps\"\r\n      @check=\"nodeChange\"\r\n      default-expand-all\r\n      highlight-current\r\n      node-key=\"onlyId\"\r\n      ref=\"apiTree\"\r\n      show-checkbox\r\n    ></el-tree>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { getAllApis } from '@/api/api'\r\nimport { UpdateCasbin, getPolicyPathByAuthorityId } from '@/api/casbin'\r\nexport default {\r\n  name: 'Apis',\r\n  props: {\r\n    row: {\r\n      default: function() {\r\n        return {}\r\n      },\r\n      type: Object\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      apiTreeData: [],\r\n      apiTreeIds: [],\r\n      needConfirm:false,\r\n      apiDefaultProps: {\r\n        children: 'children',\r\n        label: 'description'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    nodeChange(){\r\n      this.needConfirm = true\r\n    },\r\n    // 暴露给外层使用的切换拦截统一方法\r\n    enterAndNext(){\r\n      this.authApiEnter()\r\n    },\r\n    // 创建api树方法\r\n    buildApiTree(apis) {\r\n      const apiObj = new Object()\r\n      apis &&\r\n        apis.map(item => {\r\n        item.onlyId = \"p:\"+item.path+\"m:\"+item.method\r\n          if (apiObj.hasOwnProperty(item.apiGroup)) {\r\n            apiObj[item.apiGroup].push(item)\r\n          } else {\r\n            Object.assign(apiObj, { [item.apiGroup]: [item] })\r\n          }\r\n        })\r\n      const apiTree = []\r\n      for (const key in apiObj) {\r\n        const treeNode = {\r\n          ID: key,\r\n          description: key + '组',\r\n          children: apiObj[key]\r\n        }\r\n        apiTree.push(treeNode)\r\n      }\r\n      return apiTree\r\n    },\r\n    // 关联关系确定\r\n    async authApiEnter() {\r\n      const checkArr = this.$refs.apiTree.getCheckedNodes(true)\r\n      var casbinInfos = []\r\n      checkArr&&checkArr.map(item=>{\r\n        var casbinInfo = {\r\n          path:item.path,\r\n          method:item.method\r\n        }\r\n        casbinInfos.push(casbinInfo)\r\n      })\r\n      const res = await UpdateCasbin({\r\n        authorityId: this.activeUserId,\r\n        casbinInfos\r\n      })\r\n      if (res.code == 0) {\r\n        this.$message({ type: 'success', message: \"api设置成功\" })\r\n      }\r\n    }\r\n  },\r\n  async created() {\r\n    // 获取api并整理成树结构\r\n    const res2 = await getAllApis()\r\n    const apis = res2.data.apis\r\n   \r\n    this.apiTreeData = this.buildApiTree(apis)\r\n    const res = await getPolicyPathByAuthorityId({\r\n      authorityId: this.row.authorityId\r\n    })\r\n    this.activeUserId = this.row.authorityId\r\n    this.apiTreeIds = []\r\n    res.data.paths&&res.data.paths.map(item=>{\r\n      this.apiTreeIds.push(\"p:\"+item.path+\"m:\"+item.method)\r\n    })\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n</style>"],"sourceRoot":"src/view/superAdmin/authority/components"}]}