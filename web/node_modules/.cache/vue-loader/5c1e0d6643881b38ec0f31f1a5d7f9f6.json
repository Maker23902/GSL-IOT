{"remainingRequest":"D:\\Programs\\Project\\gin-vue-admin-master\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Programs\\Project\\gin-vue-admin-master\\web\\src\\view\\example\\breakpoint\\breakpoint.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Programs\\Project\\gin-vue-admin-master\\web\\src\\view\\example\\breakpoint\\breakpoint.vue","mtime":1600866450000},{"path":"D:\\Programs\\Project\\gin-vue-admin-master\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Programs\\Project\\gin-vue-admin-master\\web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Programs\\Project\\gin-vue-admin-master\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Programs\\Project\\gin-vue-admin-master\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBTcGFya01ENSBmcm9tICdzcGFyay1tZDUnCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IHsKICBmaW5kRmlsZSwKICBicmVha3BvaW50Q29udGludWVGaW5pc2gsCiAgcmVtb3ZlQ2h1bmsKfSBmcm9tICdAL2FwaS9icmVha3BvaW50JwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0hlbGxvV29ybGQnLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBmaWxlOiBudWxsLAogICAgICBmaWxlTWQ1OiAnJywKICAgICAgZm9ybURhdGFMaXN0OiBbXSwKICAgICAgd2FpdFVwTG9hZDogW10sCiAgICAgIHdhaXROdW06IDAsCiAgICAgIGxpbWl0RmlsZVNpemU6IGZhbHNlLAogICAgICBwZXJjZW50YWdlOjAsCiAgICAgIHBlcmNlbnRhZ2VGbGFnZTogdHJ1ZSwKICAgICAgY3VzdG9tQ29sb3I6ICcjNDA5ZWZmJwogICAgfQogIH0sCiAgY3JlYXRlZCgpewogICAKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIOmAieS4reaWh+S7tueahOWHveaVsAogICAgYXN5bmMgY2hvc2VGaWxlKGUpIHsKICAgICAgY29uc3QgZmlsZVIgPSBuZXcgRmlsZVJlYWRlcigpIC8vIOWIm+W7uuS4gOS4qnJlYWRlcueUqOadpeivu+WPluaWh+S7tua1gQogICAgICBjb25zdCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF0gLy8g6I635Y+W5b2T5YmN5paH5Lu2CiAgICAgIGNvbnN0IG1heFNpemUgPSA1KjEwMjQqMTAyNAogICAgICB0aGlzLmZpbGUgPSBmaWxlIC8vIGZpbGUg5Lii5YWo5bGA5pa55L6/5ZCO6Z2i55SoIOWPr+S7peaUuei/m+S4umZ1bmPkvKDlj4LlvaLlvI8KICAgICAgdGhpcy5wZXJjZW50YWdlID0gMAogICAgaWYoZmlsZS5zaXplPG1heFNpemUpewogICAgICBmaWxlUi5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKSAvLyDmiormlofku7bor7vmiJBBcnJheUJ1ZmZlciAg5Li76KaB5Li65LqG5L+d5oyB6Lef5ZCO56uv55qE5rWB5LiA6Ie0CiAgICAgIGZpbGVSLm9ubG9hZCA9IGFzeW5jIGUgPT4gewogICAgICAgIC8vIOivu+aIkGFycmF5QnVmZmVy55qE5Zue6LCDIGUg5Li65pa55rOV6Ieq5bim5Y+C5pWwIOebuOW9k+S6jiBkb23nmoRlIOa1geWtmOWcqGUudGFyZ2V0LnJlc3VsdCDkuK0KICAgICAgICBjb25zdCBibG9iID0gZS50YXJnZXQucmVzdWx0CiAgICAgICAgbGV0IHNwYXJrID0gbmV3IFNwYXJrTUQ1LkFycmF5QnVmZmVyKCkgLy8g5Yib5bu6bWQ15Yi26YCg5bel5YW3IO+8iG1kNeeUqOS6juajgOa1i+aWh+S7tuS4gOiHtOaApyDov5nph4zkuI3mh4LlsLHmiZPnlLXor53pl67miJHvvIkKICAgICAgICBzcGFyay5hcHBlbmQoYmxvYikgLy8g5paH5Lu25rWB5Lii6L+b5bel5YW3CiAgICAgICAgdGhpcy5maWxlTWQ1ID0gc3BhcmsuZW5kKCkgLy8g5bel5YW357uT5p2fIOS6p+eUn+S4gOS4qmEg5oC75paH5Lu255qEbWQ1CiAgICAgICAgY29uc3QgRmlsZVNsaWNlQ2FwID0gMSAqIDEwMjQgKiAxMDI0IC8vIOWIhueJh+Wtl+iKguaVsAogICAgICAgIGxldCBzdGFydCA9IDAgLy8g5a6a5LmJ5YiG54mH5byA5aeL5YiH55qE5Zyw5pa5CiAgICAgICAgbGV0IGVuZCA9IDAgLy8g5q+P54mH57uT5p2f5YiH55qE5Zyw5pa5YQogICAgICAgIGxldCBpID0gMCAvLyDnrKzlh6DniYcKICAgICAgICB0aGlzLmZvcm1EYXRhTGlzdCA9IFtdIC8vIOWIhueJh+WtmOWCqOeahOS4gOS4quaxoOWtkCDkuKLlhajlsYAKICAgICAgICB3aGlsZSAoZW5kIDwgZmlsZS5zaXplKSB7CiAgICAgICAgICAvLyDlvZPnu5PlsL7mlbDlrZflpKfkuo7mlofku7bmgLtzaXpl55qE5pe25YCZIOe7k+adn+WIh+eJhwogICAgICAgICAgc3RhcnQgPSBpICogRmlsZVNsaWNlQ2FwIC8vIOiuoeeul+avj+eJh+W8gOWni+S9jee9rgogICAgICAgICAgZW5kID0gKGkgKyAxKSAqIEZpbGVTbGljZUNhcCAvLyDorqHnrpfmr4/niYfnu5PmnZ/kvY3nva4KICAgICAgICAgIHZhciBmaWxlU2xpY2UgPSB0aGlzLmZpbGUuc2xpY2Uoc3RhcnQsIGVuZCkgLy8g5byA5aeL5YiHICBmaWxlLnNsaWNlIOS4uiBoNeaWueazlSDlr7nmlofku7bliIfniYcg5Y+C5pWw5Li6IOi1t+atouWtl+iKguaVsAogICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgd2luZG93LkZvcm1EYXRhKCkgLy8g5Yib5bu6Rm9ybURhdGHnlKjkuo7lrZjlgqjkvKDnu5nlkI7nq6/nmoTkv6Hmga8KICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZU1kNScsIHRoaXMuZmlsZU1kNSkgLy8g5a2Y5YKo5oC75paH5Lu255qETWQ1IOiuqeWQjuerr+efpemBk+iHquW3seaYr+iwgeeahOWIh+eJhwogICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZVNsaWNlKSAvL+W9k+WJjeeahOWIh+eJhwogICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdjaHVua051bWJlcicsIGkpIC8vIOW9k+WJjeaYr+esrOWHoOeJhwogICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlTmFtZScsIHRoaXMuZmlsZS5uYW1lKSAvL+W9k+WJjeaWh+S7tueahOaWh+S7tuWQjSDnlKjkuo7lkI7nq6/mlofku7bliIfniYfnmoTlkb3lkI0gIGZvcm1EYXRhLmFwcGVuIOS4uiBmb3JtRGF0YeWvueixoea3u+WKoOWPguaVsOeahOaWueazlQogICAgICAgICAgdGhpcy5mb3JtRGF0YUxpc3QucHVzaCh7IGtleTogaSwgZm9ybURhdGEgfSkgLy8g5oqK5b2T5YmN5YiH54mH5L+h5oGvIOiHquW3seaYr+esrOWHoOeJhyDlrZjlhaXmiJHku6zmlrnmiY3lh4blpIflpb3nmoTmsaDlrZAKICAgICAgICAgIGkrKwogICAgICAgIH0KICAgICAgICBjb25zdCBwYXJhbXMgPSB7CiAgICAgICAgICBmaWxlTmFtZTogdGhpcy5maWxlLm5hbWUsCiAgICAgICAgICBmaWxlTWQ1OiB0aGlzLmZpbGVNZDUsCiAgICAgICAgICBjaHVua1RvdGFsOiB0aGlzLmZvcm1EYXRhTGlzdC5sZW5ndGgKICAgICAgICB9CiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmluZEZpbGUocGFyYW1zKQogICAgICAgIC8vIOWFqOmDqOWIh+WujOS7peWQjiDlj5HkuIDkuKror7fmsYLnu5nlkI7nq68g5ouJ5b2T5YmN5paH5Lu25ZCO5Y+w5a2Y5YKo55qE5YiH54mH5L+h5oGvIOeUqOS6juajgOa1i+acieWkmuWwkeS4iuS8oOaIkOWKn+eahOWIh+eJhwogICAgICAgIGNvbnN0IGZpbmlzaExpc3QgPSByZXMuZGF0YS5maWxlLkV4YUZpbGVDaHVuayAvLyDkuIrkvKDmiJDlip/nmoTliIfniYcKICAgICAgICBjb25zdCBJc0ZpbmlzaCA9IHJlcy5kYXRhLmZpbGUuSXNGaW5pc2ggLy8g5piv5ZCm5piv5ZCM5paH5Lu25LiN5ZCM5ZG9IO+8iOaWh+S7tm1kNeebuOWQjCDmlofku7blkI3kuI3lkIwg5YiZ6buY6K6k5piv5ZCM5LiA5Liq5paH5Lu25L2G5piv5LiN5ZCM5paH5Lu25ZCNIOatpOaXtuWQjuWPsOaVsOaNruW6k+WPqumcgOimgeaLt+i0neS4gOS4i+aVsOaNruW6k+aWh+S7tuWNs+WPryDkuI3pnIDopoHkuIrkvKDmlofku7Yg5Y2z56eS5Lyg5Yqf6IO977yJCiAgICAgICAgaWYgKCFJc0ZpbmlzaCkgewogICAgICAgICAgLy8g5b2T5piv5pat54K557ut5Lyg5pe25YCZCiAgICAgICAgICB0aGlzLndhaXRVcExvYWQgPSB0aGlzLmZvcm1EYXRhTGlzdC5maWx0ZXIoYWxsID0+IHsKICAgICAgICAgICAgcmV0dXJuICEoCiAgICAgICAgICAgICAgZmluaXNoTGlzdCAmJgogICAgICAgICAgICAgIGZpbmlzaExpc3Quc29tZShmaSA9PiBmaS5GaWxlQ2h1bmtOdW1iZXIgPT09IGFsbC5rZXkpCiAgICAgICAgICAgICkgLy8g5om+5Ye66ZyA6KaB5LiK5Lyg55qE5YiH54mHCiAgICAgICAgICB9KQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLndhaXRVcExvYWQgPSBbXSAvLyDnp5LkvKDliJnmsqHmnInpnIDopoHkuIrkvKDnmoTliIfniYcKICAgICAgICB9CiAgICAgICAgdGhpcy53YWl0TnVtID0gdGhpcy53YWl0VXBMb2FkLmxlbmd0aCAvLyDorrDlvZXplb/luqbnlKjkuo7nmb7liIbmr5TlsZXnpLoKICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgICB0aGlzLmxpbWl0RmlsZVNpemUgPSB0cnVlCiAgICAgICAgIHRoaXMuJG1lc3NhZ2UoJ+ivt+S4iuS8oOWwj+S6jjVN5paH5Lu2JykKICAgICAgfQogICAgfSwKICAgIGdldEZpbGUoKSB7CiAgICAgIC8vIOehruWumuaMiemSrgogICAgICBpZiAodGhpcy5maWxlID09IG51bGwpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlKCfor7flhYjkuIrkvKDmlofku7YnKQogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIHRoaXMucGVyY2VudGFnZSA9IE1hdGguZmxvb3IoKCh0aGlzLmZvcm1EYXRhTGlzdC5sZW5ndGgtdGhpcy53YWl0TnVtKS90aGlzLmZvcm1EYXRhTGlzdC5sZW5ndGgpKjEwMCkKICAgICAgaWYodGhpcy5wZXJjZW50YWdlID09IDEwMCl7CiAgICAgICAgdGhpcy5wZXJjZW50YWdlRmxhZ2UgPSBmYWxzZQogICAgICB9CiAgICAgIHRoaXMuc2xpY2VGaWxlKCkgLy8g5LiK5Lyg5YiH54mHCiAgICB9LAogICAgc2xpY2VGaWxlKCkgewogICAgICB0aGlzLndhaXRVcExvYWQgJiYKICAgICAgICB0aGlzLndhaXRVcExvYWQubWFwKGl0ZW0gPT4gewogICAgICAgICAgLy/pnIDopoHkuIrkvKDnmoTliIfniYcKICAgICAgICAgIGl0ZW0uZm9ybURhdGEuYXBwZW5kKCdjaHVua1RvdGFsJywgdGhpcy5mb3JtRGF0YUxpc3QubGVuZ3RoKSAvLyDliIfniYfmgLvmlbDmkLrluKbnu5nlkI7lj7Ag5oC75pyJ55So55qECiAgICAgICAgICBjb25zdCBmaWxlUiA9IG5ldyBGaWxlUmVhZGVyKCkgLy8g5Yqf6IO95ZCM5LiKCiAgICAgICAgICBjb25zdCBmaWxlID0gaXRlbS5mb3JtRGF0YS5nZXQoJ2ZpbGUnKQogICAgICAgICAgZmlsZVIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSkKICAgICAgICAgIGZpbGVSLm9ubG9hZCA9IGUgPT4gewogICAgICAgICAgICBsZXQgc3BhcmsgPSBuZXcgU3BhcmtNRDUuQXJyYXlCdWZmZXIoKQogICAgICAgICAgICBzcGFyay5hcHBlbmQoZS50YXJnZXQucmVzdWx0KQogICAgICAgICAgICBpdGVtLmZvcm1EYXRhLmFwcGVuZCgnY2h1bmtNZDUnLCBzcGFyay5lbmQoKSkgLy8g6I635Y+W5b2T5YmN5YiH54mHbWQ1IOWQjuerr+eUqOS6jumqjOivgeWIh+eJh+WujOaVtOaApwogICAgICAgICAgICB0aGlzLnVwTG9hZEZpbGVTbGljZShpdGVtKQogICAgICAgICAgfQogICAgICAgIH0pCiAgICB9LAogICAgYXN5bmMgdXBMb2FkRmlsZVNsaWNlKGl0ZW0pIHsKICAgICAgLy8g5YiH54mH5LiK5LygCiAgICAgIGF3YWl0IGF4aW9zLnBvc3QocHJvY2Vzcy5lbnYuVlVFX0FQUF9CQVNFX0FQSSsiL2ZpbGVVcGxvYWRBbmREb3dubG9hZC9icmVha3BvaW50Q29udGludWUiLGl0ZW0uZm9ybURhdGEpCiAgICAgIHRoaXMud2FpdE51bS0tIC8vIOeZvuWIhuaVsOWinuWKoAogICAgICBpZiAodGhpcy53YWl0TnVtID09IDApIHsKICAgICAgICAvLyDliIfniYfkvKDlrozku6XlkI4g5ZCI5oiQ5paH5Lu2CiAgICAgICAgY29uc3QgcGFyYW1zID0gewogICAgICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZS5uYW1lLAogICAgICAgICAgZmlsZU1kNTogdGhpcy5maWxlTWQ1CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGJyZWFrcG9pbnRDb250aW51ZUZpbmlzaChwYXJhbXMpCiAgICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7CiAgICAgICAgICAvLyDlkIjmiJDmlofku7bov4flkI4g5Yig6Zmk57yT5a2Y5YiH54mHCiAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7CiAgICAgICAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGUubmFtZSwKICAgICAgICAgICAgZmlsZU1kNTogdGhpcy5maWxlTWQ1LAogICAgICAgICAgICBmaWxlUGF0aDogcmVzLmRhdGEuZmlsZVBhdGgKICAgICAgICAgIH0KICAgICAgICAgIGF3YWl0IHJlbW92ZUNodW5rKHBhcmFtcykKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBpbnB1dENoYW5nZSgpewogICAgICB0aGlzLiRyZWZzLklucHV0LmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoJ2NsaWNrJykpCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["breakpoint.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"breakpoint.vue","sourceRoot":"src/view/example/breakpoint","sourcesContent":["<template>\n  <div class=\"hello\">\n     <el-divider content-position=\"left\">大文件上传</el-divider>\n    <form id=\"fromCont\" method=\"post\" >\n      <div class=\"fileUpload\" @click=\"inputChange\">\n        选择文件\n        <input v-show=\"false\"  @change=\"choseFile\" id=\"file\" multiple=\"multiple\" type=\"file\" ref=\"Input\"  />\n      </div>\n    </form>\n     <el-button @click=\"getFile\" :disabled=\"limitFileSize\" type=\"primary\" size=\"medium\" class=\"uploadBtn\">上传文件</el-button>\n    <div class=\"el-upload__tip\">请上传不超过5MB的文件</div>\n    <div class=\"list\">\n      <transition  name=\"list\" tag=\"p\">\n        <div class=\"list-item\" v-if=\"file\" >\n          <i class=\"el-icon-document\"></i>\n          <span>{{ file.name }}</span>\n          <span class=\"percentage\" >{{percentage}}%</span>\n          <el-progress  :show-text='false' :text-inside=\"false\" :stroke-width=\"2\" :percentage=\"percentage\"></el-progress>\n        </div> \n      </transition>\n   </div>\n     <!-- <span\n      v-if=\"this.file\"\n    >{{Math.floor(((this.formDataList.length-this.waitNum)/this.formDataList.length)*100)}}%</span> -->\n    <div class=\"tips\">此版本为先行体验功能测试版，样式美化和性能优化正在进行中，上传切片文件和合成的完整文件分别再QMPlusserver目录的breakpointDir文件夹和fileDir文件夹</div>\n  </div>\n</template>\n<script>\nimport SparkMD5 from 'spark-md5'\nimport axios from 'axios'\nimport {\n  findFile,\n  breakpointContinueFinish,\n  removeChunk\n} from '@/api/breakpoint'\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      file: null,\n      fileMd5: '',\n      formDataList: [],\n      waitUpLoad: [],\n      waitNum: 0,\n      limitFileSize: false,\n      percentage:0,\n      percentageFlage: true,\n      customColor: '#409eff'\n    }\n  },\n  created(){\n   \n  },\n  methods: {\n    // 选中文件的函数\n    async choseFile(e) {\n      const fileR = new FileReader() // 创建一个reader用来读取文件流\n      const file = e.target.files[0] // 获取当前文件\n      const maxSize = 5*1024*1024\n      this.file = file // file 丢全局方便后面用 可以改进为func传参形式\n      this.percentage = 0\n    if(file.size<maxSize){\n      fileR.readAsArrayBuffer(file) // 把文件读成ArrayBuffer  主要为了保持跟后端的流一致\n      fileR.onload = async e => {\n        // 读成arrayBuffer的回调 e 为方法自带参数 相当于 dom的e 流存在e.target.result 中\n        const blob = e.target.result\n        let spark = new SparkMD5.ArrayBuffer() // 创建md5制造工具 （md5用于检测文件一致性 这里不懂就打电话问我）\n        spark.append(blob) // 文件流丢进工具\n        this.fileMd5 = spark.end() // 工具结束 产生一个a 总文件的md5\n        const FileSliceCap = 1 * 1024 * 1024 // 分片字节数\n        let start = 0 // 定义分片开始切的地方\n        let end = 0 // 每片结束切的地方a\n        let i = 0 // 第几片\n        this.formDataList = [] // 分片存储的一个池子 丢全局\n        while (end < file.size) {\n          // 当结尾数字大于文件总size的时候 结束切片\n          start = i * FileSliceCap // 计算每片开始位置\n          end = (i + 1) * FileSliceCap // 计算每片结束位置\n          var fileSlice = this.file.slice(start, end) // 开始切  file.slice 为 h5方法 对文件切片 参数为 起止字节数\n          const formData = new window.FormData() // 创建FormData用于存储传给后端的信息\n          formData.append('fileMd5', this.fileMd5) // 存储总文件的Md5 让后端知道自己是谁的切片\n          formData.append('file', fileSlice) //当前的切片\n          formData.append('chunkNumber', i) // 当前是第几片\n          formData.append('fileName', this.file.name) //当前文件的文件名 用于后端文件切片的命名  formData.appen 为 formData对象添加参数的方法\n          this.formDataList.push({ key: i, formData }) // 把当前切片信息 自己是第几片 存入我们方才准备好的池子\n          i++\n        }\n        const params = {\n          fileName: this.file.name,\n          fileMd5: this.fileMd5,\n          chunkTotal: this.formDataList.length\n        }\n        const res = await findFile(params)\n        // 全部切完以后 发一个请求给后端 拉当前文件后台存储的切片信息 用于检测有多少上传成功的切片\n        const finishList = res.data.file.ExaFileChunk // 上传成功的切片\n        const IsFinish = res.data.file.IsFinish // 是否是同文件不同命 （文件md5相同 文件名不同 则默认是同一个文件但是不同文件名 此时后台数据库只需要拷贝一下数据库文件即可 不需要上传文件 即秒传功能）\n        if (!IsFinish) {\n          // 当是断点续传时候\n          this.waitUpLoad = this.formDataList.filter(all => {\n            return !(\n              finishList &&\n              finishList.some(fi => fi.FileChunkNumber === all.key)\n            ) // 找出需要上传的切片\n          })\n        } else {\n          this.waitUpLoad = [] // 秒传则没有需要上传的切片\n        }\n        this.waitNum = this.waitUpLoad.length // 记录长度用于百分比展示\n      }\n      } else {\n         this.limitFileSize = true\n         this.$message('请上传小于5M文件')\n      }\n    },\n    getFile() {\n      // 确定按钮\n      if (this.file == null) {\n        this.$message('请先上传文件')\n        return\n      }\n      this.percentage = Math.floor(((this.formDataList.length-this.waitNum)/this.formDataList.length)*100)\n      if(this.percentage == 100){\n        this.percentageFlage = false\n      }\n      this.sliceFile() // 上传切片\n    },\n    sliceFile() {\n      this.waitUpLoad &&\n        this.waitUpLoad.map(item => {\n          //需要上传的切片\n          item.formData.append('chunkTotal', this.formDataList.length) // 切片总数携带给后台 总有用的\n          const fileR = new FileReader() // 功能同上\n          const file = item.formData.get('file')\n          fileR.readAsArrayBuffer(file)\n          fileR.onload = e => {\n            let spark = new SparkMD5.ArrayBuffer()\n            spark.append(e.target.result)\n            item.formData.append('chunkMd5', spark.end()) // 获取当前切片md5 后端用于验证切片完整性\n            this.upLoadFileSlice(item)\n          }\n        })\n    },\n    async upLoadFileSlice(item) {\n      // 切片上传\n      await axios.post(process.env.VUE_APP_BASE_API+\"/fileUploadAndDownload/breakpointContinue\",item.formData)\n      this.waitNum-- // 百分数增加\n      if (this.waitNum == 0) {\n        // 切片传完以后 合成文件\n        const params = {\n          fileName: this.file.name,\n          fileMd5: this.fileMd5\n        }\n        const res = await breakpointContinueFinish(params)\n        if (res.success) {\n          // 合成文件过后 删除缓存切片\n          const params = {\n            fileName: this.file.name,\n            fileMd5: this.fileMd5,\n            filePath: res.data.filePath\n          }\n          await removeChunk(params)\n        }\n      }\n    },\n    inputChange(){\n      this.$refs.Input.dispatchEvent(new MouseEvent('click'))\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n#fromCont{\n  display: inline-block;\n}\n.fileUpload{\n    padding: 4px 10px;\n    height: 20px;\n    line-height: 20px;\n    position: relative;\n    cursor: pointer;\n    color: #000;\n    border: 1px solid #c1c1c1;\n    border-radius: 4px;\n    overflow: hidden;\n    display: inline-block;\n    input{\n      position: absolute;\n      font-size: 100px;\n      right: 0;\n      top: 0;\n      opacity: 0;\n      cursor: pointer;\n    }\n}\n .fileName{\n    display: inline-block;\n    vertical-align: top;\n    margin: 6px 15px 0 15px;\n  }\n  .uploadBtn{\n    position: relative;\n    top: -10px;\n    margin-left: 15px;\n  }\n  .tips{\n    margin-top: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: #606266;\n  }\n  .el-divider{\n    margin: 0 0 30px 0;\n  }\n \n .list{\n   margin-top:15px;\n }\n .list-item {\n  display: block;\n  margin-right: 10px;\n  color: #606266;\n  line-height: 25px;\n  margin-bottom: 5px;\n  width: 40%;\n   .percentage{\n          float: right;\n        }\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-to\n/* .list-leave-active for below version 2.1.8 */ {\n  opacity: 0;\n  transform: translateY(-30px);\n}\n</style>"]}]}