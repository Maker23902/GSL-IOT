{"remainingRequest":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\Go\\project\\GSL-IOT\\web\\src\\view\\superAdmin\\authority\\components\\apis.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\Go\\project\\GSL-IOT\\web\\src\\view\\superAdmin\\authority\\components\\apis.vue","mtime":1601862474887},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601862450187},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\babel-loader\\lib\\index.js","mtime":1601862448530},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601862450187},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1601862472047}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGdldEFsbEFwaXMgfSBmcm9tICdAL2FwaS9hcGknCmltcG9ydCB7IFVwZGF0ZUNhc2JpbiwgZ2V0UG9saWN5UGF0aEJ5QXV0aG9yaXR5SWQgfSBmcm9tICdAL2FwaS9jYXNiaW4nCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQXBpcycsCiAgcHJvcHM6IHsKICAgIHJvdzogewogICAgICBkZWZhdWx0OiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4ge30KICAgICAgfSwKICAgICAgdHlwZTogT2JqZWN0CiAgICB9CiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYXBpVHJlZURhdGE6IFtdLAogICAgICBhcGlUcmVlSWRzOiBbXSwKICAgICAgbmVlZENvbmZpcm06ZmFsc2UsCiAgICAgIGFwaURlZmF1bHRQcm9wczogewogICAgICAgIGNoaWxkcmVuOiAnY2hpbGRyZW4nLAogICAgICAgIGxhYmVsOiAnZGVzY3JpcHRpb24nCiAgICAgIH0KICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIG5vZGVDaGFuZ2UoKXsKICAgICAgdGhpcy5uZWVkQ29uZmlybSA9IHRydWUKICAgIH0sCiAgICAvLyDmmrTpnLLnu5nlpJblsYLkvb/nlKjnmoTliIfmjaLmi6bmiKrnu5/kuIDmlrnms5UKICAgIGVudGVyQW5kTmV4dCgpewogICAgICB0aGlzLmF1dGhBcGlFbnRlcigpCiAgICB9LAogICAgLy8g5Yib5bu6YXBp5qCR5pa55rOVCiAgICBidWlsZEFwaVRyZWUoYXBpcykgewogICAgICBjb25zdCBhcGlPYmogPSBuZXcgT2JqZWN0KCkKICAgICAgYXBpcyAmJgogICAgICAgIGFwaXMubWFwKGl0ZW0gPT4gewogICAgICAgIGl0ZW0ub25seUlkID0gInA6IitpdGVtLnBhdGgrIm06IitpdGVtLm1ldGhvZAogICAgICAgICAgaWYgKGFwaU9iai5oYXNPd25Qcm9wZXJ0eShpdGVtLmFwaUdyb3VwKSkgewogICAgICAgICAgICBhcGlPYmpbaXRlbS5hcGlHcm91cF0ucHVzaChpdGVtKQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihhcGlPYmosIHsgW2l0ZW0uYXBpR3JvdXBdOiBbaXRlbV0gfSkKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBjb25zdCBhcGlUcmVlID0gW10KICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXBpT2JqKSB7CiAgICAgICAgY29uc3QgdHJlZU5vZGUgPSB7CiAgICAgICAgICBJRDoga2V5LAogICAgICAgICAgZGVzY3JpcHRpb246IGtleSArICfnu4QnLAogICAgICAgICAgY2hpbGRyZW46IGFwaU9ialtrZXldCiAgICAgICAgfQogICAgICAgIGFwaVRyZWUucHVzaCh0cmVlTm9kZSkKICAgICAgfQogICAgICByZXR1cm4gYXBpVHJlZQogICAgfSwKICAgIC8vIOWFs+iBlOWFs+ezu+ehruWumgogICAgYXN5bmMgYXV0aEFwaUVudGVyKCkgewogICAgICBjb25zdCBjaGVja0FyciA9IHRoaXMuJHJlZnMuYXBpVHJlZS5nZXRDaGVja2VkTm9kZXModHJ1ZSkKICAgICAgdmFyIGNhc2JpbkluZm9zID0gW10KICAgICAgY2hlY2tBcnImJmNoZWNrQXJyLm1hcChpdGVtPT57CiAgICAgICAgdmFyIGNhc2JpbkluZm8gPSB7CiAgICAgICAgICBwYXRoOml0ZW0ucGF0aCwKICAgICAgICAgIG1ldGhvZDppdGVtLm1ldGhvZAogICAgICAgIH0KICAgICAgICBjYXNiaW5JbmZvcy5wdXNoKGNhc2JpbkluZm8pCiAgICAgIH0pCiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IFVwZGF0ZUNhc2Jpbih7CiAgICAgICAgYXV0aG9yaXR5SWQ6IHRoaXMuYWN0aXZlVXNlcklkLAogICAgICAgIGNhc2JpbkluZm9zCiAgICAgIH0pCiAgICAgIGlmIChyZXMuY29kZSA9PSAwKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZSh7IHR5cGU6ICdzdWNjZXNzJywgbWVzc2FnZTogImFwaeiuvue9ruaIkOWKnyIgfSkKICAgICAgfQogICAgfQogIH0sCiAgYXN5bmMgY3JlYXRlZCgpIHsKICAgIC8vIOiOt+WPlmFwaeW5tuaVtOeQhuaIkOagkee7k+aehAogICAgY29uc3QgcmVzMiA9IGF3YWl0IGdldEFsbEFwaXMoKQogICAgY29uc3QgYXBpcyA9IHJlczIuZGF0YS5hcGlzCiAgIAogICAgdGhpcy5hcGlUcmVlRGF0YSA9IHRoaXMuYnVpbGRBcGlUcmVlKGFwaXMpCiAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRQb2xpY3lQYXRoQnlBdXRob3JpdHlJZCh7CiAgICAgIGF1dGhvcml0eUlkOiB0aGlzLnJvdy5hdXRob3JpdHlJZAogICAgfSkKICAgIHRoaXMuYWN0aXZlVXNlcklkID0gdGhpcy5yb3cuYXV0aG9yaXR5SWQKICAgIHRoaXMuYXBpVHJlZUlkcyA9IFtdCiAgICByZXMuZGF0YS5wYXRocyYmcmVzLmRhdGEucGF0aHMubWFwKGl0ZW09PnsKICAgICAgdGhpcy5hcGlUcmVlSWRzLnB1c2goInA6IitpdGVtLnBhdGgrIm06IitpdGVtLm1ldGhvZCkKICAgIH0pCiAgfQp9Cg=="},{"version":3,"sources":["apis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"apis.vue","sourceRoot":"src/view/superAdmin/authority/components","sourcesContent":["<template>\n  <div>\n    <div class=\"clearflex\">\n      <el-button @click=\"authApiEnter\" class=\"fl-right\" size=\"small\" type=\"primary\">确 定</el-button>\n    </div>\n    <el-tree\n      :data=\"apiTreeData\"\n      :default-checked-keys=\"apiTreeIds\"\n      :props=\"apiDefaultProps\"\n      @check=\"nodeChange\"\n      default-expand-all\n      highlight-current\n      node-key=\"onlyId\"\n      ref=\"apiTree\"\n      show-checkbox\n    ></el-tree>\n  </div>\n</template>\n<script>\nimport { getAllApis } from '@/api/api'\nimport { UpdateCasbin, getPolicyPathByAuthorityId } from '@/api/casbin'\nexport default {\n  name: 'Apis',\n  props: {\n    row: {\n      default: function() {\n        return {}\n      },\n      type: Object\n    }\n  },\n  data() {\n    return {\n      apiTreeData: [],\n      apiTreeIds: [],\n      needConfirm:false,\n      apiDefaultProps: {\n        children: 'children',\n        label: 'description'\n      }\n    }\n  },\n  methods: {\n    nodeChange(){\n      this.needConfirm = true\n    },\n    // 暴露给外层使用的切换拦截统一方法\n    enterAndNext(){\n      this.authApiEnter()\n    },\n    // 创建api树方法\n    buildApiTree(apis) {\n      const apiObj = new Object()\n      apis &&\n        apis.map(item => {\n        item.onlyId = \"p:\"+item.path+\"m:\"+item.method\n          if (apiObj.hasOwnProperty(item.apiGroup)) {\n            apiObj[item.apiGroup].push(item)\n          } else {\n            Object.assign(apiObj, { [item.apiGroup]: [item] })\n          }\n        })\n      const apiTree = []\n      for (const key in apiObj) {\n        const treeNode = {\n          ID: key,\n          description: key + '组',\n          children: apiObj[key]\n        }\n        apiTree.push(treeNode)\n      }\n      return apiTree\n    },\n    // 关联关系确定\n    async authApiEnter() {\n      const checkArr = this.$refs.apiTree.getCheckedNodes(true)\n      var casbinInfos = []\n      checkArr&&checkArr.map(item=>{\n        var casbinInfo = {\n          path:item.path,\n          method:item.method\n        }\n        casbinInfos.push(casbinInfo)\n      })\n      const res = await UpdateCasbin({\n        authorityId: this.activeUserId,\n        casbinInfos\n      })\n      if (res.code == 0) {\n        this.$message({ type: 'success', message: \"api设置成功\" })\n      }\n    }\n  },\n  async created() {\n    // 获取api并整理成树结构\n    const res2 = await getAllApis()\n    const apis = res2.data.apis\n   \n    this.apiTreeData = this.buildApiTree(apis)\n    const res = await getPolicyPathByAuthorityId({\n      authorityId: this.row.authorityId\n    })\n    this.activeUserId = this.row.authorityId\n    this.apiTreeIds = []\n    res.data.paths&&res.data.paths.map(item=>{\n      this.apiTreeIds.push(\"p:\"+item.path+\"m:\"+item.method)\n    })\n  }\n}\n</script>\n<style lang=\"scss\">\n</style>"]}]}