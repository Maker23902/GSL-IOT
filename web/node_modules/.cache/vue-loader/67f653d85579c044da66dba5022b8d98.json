{"remainingRequest":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\Go\\project\\GSL-IOT\\web\\src\\view\\systemTools\\autoCode\\index.vue?vue&type=style&index=0&scope=true&lang=scss&","dependencies":[{"path":"G:\\Go\\project\\GSL-IOT\\web\\src\\view\\systemTools\\autoCode\\index.vue","mtime":1601862474887},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\css-loader\\dist\\cjs.js","mtime":1601862453217},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1601862472047},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\postcss-loader\\src\\index.js","mtime":1601862466697},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1601862467967},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601862450187},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1601862472047}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJ1dHRvbi1ib3ggewogIHBhZGRpbmc6IDEwcHggMjBweDsKICAuZWwtYnV0dG9uIHsKICAgIGZsb2F0OiByaWdodDsKICB9Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwWA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/view/systemTools/autoCode","sourcesContent":["<template>\n  <div>\n    <!-- 从数据库直接获取字段 -->\n    <el-collapse v-model=\"activeNames\">\n      <el-collapse-item name=\"1\">\n        <template slot=\"title\">\n          <div :style=\"{fontSize:'16px',paddingLeft:'20px'}\">\n            点这里从现有数据库创建代码\n            <i class=\"header-icon el-icon-thumb\"></i>\n          </div>\n        </template>\n        <el-form ref=\"getTableForm\" :inline=\"true\" :model=\"dbform\" label-width=\"120px\">\n          <el-form-item label=\"数据库名\" prop=\"structName\">\n            <el-select @change=\"getTable\" v-model=\"dbform.dbName\" filterable placeholder=\"请选择数据库\">\n              <el-option\n                v-for=\"item in dbOptions\"\n                :key=\"item.database\"\n                :label=\"item.database\"\n                :value=\"item.database\"\n              ></el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"表名\" prop=\"structName\">\n            <el-select\n              v-model=\"dbform.tableName\"\n              :disabled=\"!dbform.dbName\"\n              filterable\n              placeholder=\"请选择表\"\n            >\n              <el-option\n                v-for=\"item in tableOptions\"\n                :key=\"item.tableName\"\n                :label=\"item.tableName\"\n                :value=\"item.tableName\"\n              ></el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item>\n            <el-button @click=\"getColume\" type=\"primary\">使用此表创建</el-button>\n          </el-form-item>\n        </el-form>\n      </el-collapse-item>\n    </el-collapse>\n\n    <el-divider></el-divider>\n    <!-- 初始版本自动化代码工具 -->\n    <el-form ref=\"autoCodeForm\" :rules=\"rules\" :model=\"form\" label-width=\"120px\" :inline=\"true\">\n      <el-form-item label=\"Struct名称\" prop=\"structName\">\n        <el-input v-model=\"form.structName\" placeholder=\"首字母自动转换大写\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"tableName\" prop=\"tableName\">\n        <el-input v-model=\"form.tableName\" placeholder=\"指定表名（非必填）\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Struct简称\" prop=\"abbreviation\">\n        <el-input v-model=\"form.abbreviation\" placeholder=\"简称会作为入参对象名和路由group\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Struct中文名称\" prop=\"description\">\n        <el-input v-model=\"form.description\" placeholder=\"中文描述作为自动api描述\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"文件名称\" prop=\"packageName\">\n        <el-input v-model=\"form.packageName\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"自动创建api\">\n        <el-checkbox v-model=\"form.autoCreateApiToSql\"></el-checkbox>\n      </el-form-item>\n    </el-form>\n    <!-- 组件列表 -->\n    <div class=\"button-box clearflex\">\n      <el-button @click=\"editAndAddField()\" type=\"primary\">新增Field</el-button>\n    </div>\n    <el-table :data=\"form.fields\" border stripe>\n      <el-table-column type=\"index\" label=\"序列\" width=\"100\"></el-table-column>\n      <el-table-column prop=\"fieldName\" label=\"Field名\"></el-table-column>\n      <el-table-column prop=\"fieldDesc\" label=\"中文名\"></el-table-column>\n      <el-table-column prop=\"fieldJson\" label=\"FieldJson\"></el-table-column>\n      <el-table-column prop=\"fieldType\" label=\"Field数据类型\" width=\"130\"></el-table-column>\n      <el-table-column prop=\"dataType\" label=\"数据库字段类型\" width=\"130\"></el-table-column>\n      <el-table-column prop=\"dataTypeLong\" label=\"数据库字段长度\" width=\"130\"></el-table-column>\n      <el-table-column prop=\"columnName\" label=\"数据库字段\" width=\"130\"></el-table-column>\n      <el-table-column prop=\"comment\" label=\"数据库字段描述\" width=\"130\"></el-table-column>\n      <el-table-column prop=\"fieldSearchType\" label=\"搜索条件\" width=\"130\"></el-table-column>\n      <el-table-column prop=\"dictType\" label=\"字典\" width=\"130\"></el-table-column>\n      <el-table-column label=\"操作\" width=\"300\">\n        <template slot-scope=\"scope\">\n          <el-button\n            size=\"mini\"\n            type=\"primary\"\n            icon=\"el-icon-edit\"\n            @click=\"editAndAddField(scope.row)\"\n          >编辑</el-button>\n          <el-button\n            size=\"mini\"\n            type=\"text\"\n            :disabled=\"scope.$index == 0\"\n            @click=\"moveUpField(scope.$index)\"\n          >上移</el-button>\n          <el-button\n            size=\"mini\"\n            type=\"text\"\n            :disabled=\"(scope.$index + 1) == form.fields.length\"\n            @click=\"moveDownField(scope.$index)\"\n          >下移</el-button>\n          <el-popover placement=\"top\" v-model=\"scope.row.visible\">\n            <p>确定删除吗？</p>\n            <div style=\"text-align: right; margin: 0\">\n              <el-button size=\"mini\" type=\"text\" @click=\"scope.row.visible = false\">取消</el-button>\n              <el-button type=\"primary\" size=\"mini\" @click=\"deleteField(scope.$index)\">确定</el-button>\n            </div>\n            <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" slot=\"reference\">删除</el-button>\n          </el-popover>\n        </template>\n      </el-table-column>\n    </el-table>\n    <el-tag type=\"danger\">id , created_at , updated_at , deleted_at 会自动生成请勿重复创建</el-tag>\n    <!-- 组件列表 -->\n    <div class=\"button-box clearflex\">\n      <el-button @click=\"enterForm\" type=\"primary\">生成代码包</el-button>\n    </div>\n    <!-- 组件弹窗 -->\n    <el-dialog title=\"组件内容\" :visible.sync=\"dialogFlag\">\n      <FieldDialog v-if=\"dialogFlag\" :dialogMiddle=\"dialogMiddle\" ref=\"fieldDialog\" />\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"closeDialog\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"enterDialog\">确 定</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n<script>\nconst fieldTemplate = {\n  fieldName: \"\",\n  fieldDesc: \"\",\n  fieldType: \"\",\n  dataType: \"\",\n  fieldJson: \"\",\n  columnName: \"\",\n  dataTypeLong: \"\",\n  comment: \"\",\n  fieldSearchType: \"\",\n  dictType:\"\"\n};\n\nimport FieldDialog from \"@/view/systemTools/autoCode/component/fieldDialog.vue\";\nimport { toUpperCase, toHump } from \"@/utils/stringFun.js\";\nimport { createTemp, getDB, getTable, getColume } from \"@/api/autoCode.js\";\nimport { getDict } from \"@/utils/dictionary\";\n\nexport default {\n  name: \"autoCode\",\n  data() {\n    return {\n      activeNames: [\"\"],\n      dbform: {\n        dbName: \"\",\n        tableName: \"\"\n      },\n      dbOptions: [],\n      tableOptions: [],\n      addFlag: \"\",\n      fdMap: {},\n      form: {\n        structName: \"\",\n        tableName: \"\",\n        packageName: \"\",\n        abbreviation: \"\",\n        description: \"\",\n        autoCreateApiToSql: false,\n        fields: []\n      },\n      rules: {\n        structName: [\n          { required: true, message: \"请输入结构体名称\", trigger: \"blur\" }\n        ],\n        abbreviation: [\n          { required: true, message: \"请输入结构体简称\", trigger: \"blur\" }\n        ],\n        description: [\n          { required: true, message: \"请输入结构体描述\", trigger: \"blur\" }\n        ],\n        packageName: [\n          {\n            required: true,\n            message: \"文件名称：sys_xxxx_xxxx\",\n            trigger: \"blur\"\n          }\n        ]\n      },\n      dialogMiddle: {},\n      bk: {},\n      dialogFlag: false\n    };\n  },\n  components: {\n    FieldDialog\n  },\n  methods: {\n    editAndAddField(item) {\n      this.dialogFlag = true;\n      if (item) {\n        this.addFlag = \"edit\";\n        this.bk = JSON.parse(JSON.stringify(item));\n        this.dialogMiddle = item;\n      } else {\n        this.addFlag = \"add\";\n        this.dialogMiddle = JSON.parse(JSON.stringify(fieldTemplate));\n      }\n    },\n    moveUpField(index) {\n      if (index == 0) {\n        return;\n      }\n      const oldUpField = this.form.fields[index - 1];\n      this.form.fields.splice(index - 1, 1);\n      this.form.fields.splice(index, 0, oldUpField);\n    },\n    moveDownField(index) {\n      const fCount = this.form.fields.length;\n      if (index == fCount - 1) {\n        return;\n      }\n      const oldDownField = this.form.fields[index + 1];\n      this.form.fields.splice(index + 1, 1);\n      this.form.fields.splice(index, 0, oldDownField);\n    },\n    enterDialog() {\n      this.$refs.fieldDialog.$refs.fieldDialogFrom.validate(valid => {\n        if (valid) {\n          this.dialogMiddle.fieldName = toUpperCase(\n            this.dialogMiddle.fieldName\n          );\n          if (this.addFlag == \"add\") {\n            this.form.fields.push(this.dialogMiddle);\n          }\n          this.dialogFlag = false;\n        } else {\n          return false;\n        }\n      });\n    },\n    closeDialog() {\n      if (this.addFlag == \"edit\") {\n        this.dialogMiddle = this.bk;\n      }\n      this.dialogFlag = false;\n    },\n    deleteField(index) {\n      this.form.fields.splice(index, 1);\n    },\n    async enterForm() {\n      if (this.form.fields.length <= 0) {\n        this.$message({\n          type: \"error\",\n          message: \"请填写至少一个field\"\n        });\n        return false;\n      }\n      if (\n        this.form.fields.some(item => item.fieldName == this.form.structName)\n      ) {\n        this.$message({\n          type: \"error\",\n          message: \"存在与结构体同名的字段\"\n        });\n        return false;\n      }\n      this.$refs.autoCodeForm.validate(async valid => {\n        if (valid) {\n          this.form.structName = toUpperCase(this.form.structName);\n          if (this.form.structName == this.form.abbreviation) {\n            this.$message({\n              type: \"error\",\n              message: \"structName和struct简称不能相同\"\n            });\n            return false;\n          }\n          const data = await createTemp(this.form);\n          const blob = new Blob([data]);\n          const fileName = \"ginvueadmin.zip\";\n          if (\"download\" in document.createElement(\"a\")) {\n            // 不是IE浏览器\n            let url = window.URL.createObjectURL(blob);\n            let link = document.createElement(\"a\");\n            link.style.display = \"none\";\n            link.href = url;\n            link.setAttribute(\"download\", fileName);\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link); // 下载完成移除元素\n            window.URL.revokeObjectURL(url); // 释放掉blob对象\n          } else {\n            // IE 10+\n            window.navigator.msSaveBlob(blob, fileName);\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    async getDb() {\n      const res = await getDB();\n      if (res.code == 0) {\n        this.dbOptions = res.data.dbs;\n      }\n    },\n    async getTable() {\n      const res = await getTable({ dbName: this.dbform.dbName });\n      if (res.code == 0) {\n        this.tableOptions = res.data.tables;\n      }\n      this.dbform.tableName = \"\";\n    },\n    async getColume() {\n      const gormModelList = [\"id\", \"created_at\", \"updated_at\", \"deleted_at\"];\n      const res = await getColume(this.dbform);\n      if (res.code == 0) {\n        const tbHump = toHump(this.dbform.tableName);\n        this.form.structName = toUpperCase(tbHump);\n        this.form.tableName = this.dbform.tableName;\n        this.form.packageName = tbHump;\n        this.form.abbreviation = tbHump;\n        this.form.description = tbHump + \"表\";\n        this.form.autoCreateApiToSql = true;\n        this.form.fields = [];\n        res.data.columes &&\n          res.data.columes.map(item => {\n            if (!gormModelList.some(gormfd => gormfd == item.columeName)) {\n              const fbHump = toHump(item.columeName);\n              this.form.fields.push({\n                fieldName: toUpperCase(fbHump),\n                fieldDesc: item.columeComment || fbHump + \"字段\",\n                fieldType: this.fdMap[item.dataType],\n                dataType: item.dataType,\n                fieldJson: fbHump,\n                dataTypeLong: item.dataTypeLong,\n                columnName: item.columeName,\n                comment: item.columeComment,\n                fieldSearchType: \"\",\n                dictType:\"\"\n              });\n            }\n          });\n      }\n    },\n    async setFdMap() {\n      const fdTpyes = [\"string\", \"int\", \"bool\", \"float64\", \"time.Time\"];\n      fdTpyes.map(async fdtype => {\n        const res = await getDict(fdtype);\n        res.map(item => {\n          this.fdMap[item.label] = fdtype;\n        });\n      });\n    }\n  },\n  created() {\n    this.getDb();\n    this.setFdMap();\n  }\n};\n</script>\n<style scope lang=\"scss\">\n.button-box {\n  padding: 10px 20px;\n  .el-button {\n    float: right;\n  }\n}\n</style>\n"]}]}