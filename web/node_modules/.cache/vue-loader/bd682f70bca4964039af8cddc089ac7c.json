{"remainingRequest":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!G:\\Go\\project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\Go\\project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\Go\\project\\GSL-IOT\\web\\src\\view\\LoraWAN\\Gateway\\register.vue?vue&type=template&id=5501f668&","dependencies":[{"path":"G:\\Go\\project\\GSL-IOT\\web\\src\\view\\LoraWAN\\Gateway\\register.vue","mtime":1601862474857},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601862450187},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1601862472047},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601862450187},{"path":"G:\\Go\\project\\GSL-IOT\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1601862472047}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiYXBwIiB9IH0sIFsKICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7ICJkYXRhLXJlYWN0cm9vdCI6ICIiIH0gfSwgWwogICAgICBfYygiZGl2IiwgWwogICAgICAgIF9jKCJtYWluIiwgeyBzdGF0aWNDbGFzczogIl8yYlNTTEpremZGIiB9LCBbCiAgICAgICAgICBfdm0uX20oMCksCiAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8zbGkzME9yZllWIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiWTN1Y1JLTUx5bCIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB0b3A6ICIwcHgiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMjNvLUNFR2x3aCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl9tKDIpLAogICAgICAgICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgICAgICAgX3ZtLl9tKDQpLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfM0Q4MFpPRzJ1aSIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX20oNSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFObUJETjNZdkciIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMWgwR1ZjMVdjOCBfNmhuMVVpTTFzQSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2VDhIZllQV3VIIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0YWJpbmRleDogIjEiLCB0eXBlOiAiYnV0dG9uIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oNiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJfMXZMTzdVT2R4VSBfMlFVZGNMRDlnWiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZpZXdib3g6ICIyMDYgLTIwNiA1MTIgNTEyIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIl8yRmpWaHFtTEV5IF8yNWdDYUI2VmdPIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk01OTgsMTM4YzAsNi4xLTIuMywxMi4zLTcsMTdMNDc5LDI2N2MtOS40LDkuNC0yNC42LDkuNC0zMy45LDBMMzMzLDE1NWMtOS40LTkuNC05LjQtMjQuNiwwLTMzLjljOS40LTkuNCwyNC42LTkuNCwzMy45LDAgbDk1LDk1bDk1LTk1YzkuNC05LjQsMjQuNi05LjQsMzMuOSwwQzU5NS43LDEyNS43LDU5OCwxMzEuOSw1OTgsMTM4eiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIl8yRmpWaHFtTEV5IF8xTy0tcWhfYWVCIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk01OTgtMzhjMC02LjEtMi4zLTEyLjMtNy0xN0w0NzktMTY3Yy05LjQtOS40LTI0LjYtOS40LTMzLjksMEwzMzMtNTVjLTkuNCw5LjQtOS40LDI0LjYsMCwzMy45YzkuNCw5LjQsMjQuNiw5LjQsMzMuOSwwIGw5NS05NWw5NSw5NWM5LjQsOS40LDI0LjYsOS40LDMzLjksMEM1OTUuNy0yNS43LDU5OC0zMS45LDU5OC0zOHoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSg3KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM3Q3S1RYdW9GTiIgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl9tKDgpLAogICAgICAgICAgICAgICAgX3ZtLl9tKDkpLAogICAgICAgICAgICAgICAgX3ZtLl9tKDEwKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX20oMTEpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fbSgxMiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMlhDUTNqUGFYWSIgfSkKICAgICAgXSksCiAgICAgIF92bS5fbSgxMykKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMkJHVGpsT3VaOSBFM3c4bzRvMWxiIiB9LCBbCiAgICAgIF9jKCJzcGFuIiwgW19jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJfMlpfOEtULUcyVyIgfSldKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAiXzFGT1otTVBZMGoiLCBzdGF0aWNTdHlsZTogeyB0b3A6ICIwcHgiIH0gfSwKICAgICAgWwogICAgICAgIF9jKCJoZWFkZXIiLCB7IHN0YXRpY0NsYXNzOiAiS2FWVnJoZzd0ZiIgfSwgWwogICAgICAgICAgX2MoImgxIiwgeyBzdGF0aWNDbGFzczogIlFTV0daTWpXWUciIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLms6jlhoznvZHlhbMgIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJZQWtzOUd3ZFVrIiB9KQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfM0Q4MFpPRzJ1aSIgfSwgWwogICAgICBfYygibGFiZWwiLCB7IHN0YXRpY0NsYXNzOiAiXzJiZ1R1dlNmQ2UiLCBhdHRyczogeyBmb3I6ICJpZCIgfSB9LCBbCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzI3Z2hhSzlJTXciIH0sIFtfdm0uX3YoIue9keWFs0lEICIpXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfM2JvTTRLUFZ4LSIgfSwgWwogICAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICAgIF92bS5fdigi5Li65oKo55qE572R5YWz6K6+572u5LiA5Liq5piT6K+75oeC55qE5ZSv5LiA5qCH6K+G77yM5Y+R5oyl5oKo55qE5Yib5oSP5ZCn77yBICIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8xTm1CRE4zWXZHIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMUhsdmlVdERXayBfM1hTWUVyT1hCVCIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJTYVkyNjFxOHBrIiB9KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiWUdEOUZmWTBrNSIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl81czNFeGNndU9IIiB9LCBbCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzN3T2ktZ0EzMVAiIH0pLAogICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiXzN6eFQ5S1RaaTUiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgbmFtZTogImlkIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIiLAogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIiIsCiAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogIm5vbmUiLAogICAgICAgICAgICAgICAgICBhdXRvY29ycmVjdDogIm9mZiIsCiAgICAgICAgICAgICAgICAgIGF1dG9jYXBpdGFsaXplOiAib2ZmIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8yZWlwbFBKcUUyIiB9KQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8xU3p0VW42c2pOIiB9KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFhMms5UTFmVkQiIH0pLAogICAgICAgICAgX2MoInNwYW4iLCBbX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMXY4MkhIQUI1ViIgfSldKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM3Q3S1RYdW9GTiIgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzNEODBaT0cydWkgXzNsNldoQVpUR3ciIH0sIFsKICAgICAgX2MoImxhYmVsIiwgeyBzdGF0aWNDbGFzczogIl8yYmdUdXZTZkNlIiwgYXR0cnM6IHsgZm9yOiAibGVnYWN5IiB9IH0sIFsKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMjdnaGFLOUlNdyIgfSwgWwogICAgICAgICAgX3ZtLl92KCLmiJHmraPlnKjkvb/nlKjkvKDnu5/nmoTljIXovazlj5HlmaggIikKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8zYm9NNEtQVngtIiB9LCBbCiAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgX3ZtLl92KCLlpoLmnpzmgqjmraPlnKjkvb/nlKjkvKDnu5/nmoQgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIl8ybU1MbGxScW5QIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9UaGVUaGluZ3NOZXR3b3JrL3BhY2tldF9mb3J3YXJkZXIvdHJlZS9sZWdhY3kiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoInNwYW4iLCBbX3ZtLl92KCJTZW10ZWNoIHBhY2tldCBmb3J3YXJkZXIgIildKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCLkvZzkuLrljIXovazlj5HlmajvvIzor7fli77pgInmraTpobnjgIIgIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFObUJETjNZdkciIH0sIFsKICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImg3VU55NHcwN1UiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgdHlwZTogImNoZWNrYm94IiwKICAgICAgICAgICAgbmFtZTogImxlZ2FjeSIsCiAgICAgICAgICAgIGlkOiAibGVnYWN5IiwKICAgICAgICAgICAgZm9ybTogInJlZ2lzdGVyLWdhdGV3YXkiLAogICAgICAgICAgICB2YWx1ZTogIm9uIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM3Q3S1RYdW9GTiIgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzNEODBaT0cydWkiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImxhYmVsIiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAiXzJiZ1R1dlNmQ2UiLCBhdHRyczogeyBmb3I6ICJkZXNjcmlwdGlvbiIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8yN2doYUs5SU13IiB9LCBbX3ZtLl92KCLmj4/ov7AgIildKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzNib000S1BWeC0iIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLkuLrmgqjnmoTnvZHlhbPmt7vliqDkuIDmrrXmj4/ov7AgIildKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFObUJETjNZdkciIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8xSGx2aVV0RFdrIF8zWFNZRXJPWEJUIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlNhWTI2MXE4cGsiIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJZR0Q5RmZZMGs1IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzVzM0V4Y2d1T0giIH0sIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM3dPaS1nQTMxUCIgfSksCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJfM3p4VDlLVFppNSIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBuYW1lOiAiZGVzY3JpcHRpb24iLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIiIsCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiIiwKICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlOiAibm9uZSIsCiAgICAgICAgICAgICAgICAgIGF1dG9jb3JyZWN0OiAib2ZmIiwKICAgICAgICAgICAgICAgICAgYXV0b2NhcGl0YWxpemU6ICJvZmYiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzJlaXBsUEpxRTIiIH0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFTenRVbjZzak4iIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtSFNzZmRnNE1OIF8yOUE4UlFicndTIGlvbiBpb24tY2hlY2ttYXJrLWNpcmNsZWQiCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFhMms5UTFmVkQiIH0pLAogICAgICAgICAgX2MoInNwYW4iLCBbX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMXY4MkhIQUI1ViIgfSldKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM3Q3S1RYdW9GTiIgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAibGFiZWwiLAogICAgICB7IHN0YXRpY0NsYXNzOiAiXzJiZ1R1dlNmQ2UiLCBhdHRyczogeyBmb3I6ICJmcmVxdWVuY3lfcGxhbiIgfSB9LAogICAgICBbCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzI3Z2hhSzlJTXciIH0sIFtfdm0uX3YoIumikeautSAiKV0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzNib000S1BWeC0iIH0sIFsKICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICBfdm0uX3YoIui/meS4que9keWFs+WwhuS9v+eUqOeahCAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiXzJtTUxsbFJxblAiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cudGhldGhpbmdzbmV0d29yay5vcmcvd2lraS9Mb1JhV0FOL0ZyZXF1ZW5jaWVzL0J5LUNvdW50cnkiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoInNwYW4iLCBbX3ZtLl92KCLpopHmrrUgIildKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8ydEUzTTlhdXJoIiB9LCBbCiAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8xQzVHcmU3dkl5IiB9LCBbCiAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLmnKrpgInmi6kgIildKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInVsIiwgeyBzdGF0aWNDbGFzczogIl8yREVQZktIUGR4IiB9LCBbCiAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJfM2Q0d3FKNWJwWSBfM0FJc3Y3ZHlpZiIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFaQy1qNTR0R1AiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzMyWWFFaklpU28iIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJBc2lhIildKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzJYNUFwb0tmMU0iIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjkyMC05MjMgIiksCiAgICAgICAgICAgICAgX3ZtLl92KCJNSHogIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJfM2Q0d3FKNWJwWSIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFaQy1qNTR0R1AiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzMyWWFFaklpU28iIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJBc2lhIildKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzJYNUFwb0tmMU0iIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjkyMy05MjUgIiksCiAgICAgICAgICAgICAgX3ZtLl92KCJNSHogIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJfM2Q0d3FKNWJwWSIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFaQy1qNTR0R1AiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzMyWWFFaklpU28iIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJBdXN0cmFsaWEiKV0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMlg1QXBvS2YxTSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOTE1ICIpLAogICAgICAgICAgICAgIF92bS5fdigiTUh6ICIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiXzNkNHdxSjVicFkiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8xWkMtajU0dEdQIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8zMllhRWpJaVNvIiB9LCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiQ2hpbmEiKV0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMlg1QXBvS2YxTSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiNDcwLTUxMCAiKSwKICAgICAgICAgICAgICBfdm0uX3YoIk1IeiAiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogIl8zZDR3cUo1YnBZIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMVpDLWo1NHRHUCIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMzJZYUVqSWlTbyIgfSwgWwogICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIkV1cm9wZSIpXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8yWDVBcG9LZjFNIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI4NjggIiksCiAgICAgICAgICAgICAgX3ZtLl92KCJNSHogIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJfM2Q0d3FKNWJwWSIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFaQy1qNTR0R1AiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzMyWWFFaklpU28iIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJJbmRpYSIpXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8yWDVBcG9LZjFNIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI4NjUtODY3ICIpLAogICAgICAgICAgICAgIF92bS5fdigiTUh6ICIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiXzNkNHdxSjVicFkiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8xWkMtajU0dEdQIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8zMllhRWpJaVNvIiB9LCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiS29yZWEiKV0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMlg1QXBvS2YxTSIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOTIwLTkyMyAiKSwKICAgICAgICAgICAgICBfdm0uX3YoIk1IeiAiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogIl8zZDR3cUo1YnBZIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMVpDLWo1NHRHUCIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMzJZYUVqSWlTbyIgfSwgWwogICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIlJ1c3NpYSIpXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8yWDVBcG9LZjFNIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI4NjQtODcwICIpLAogICAgICAgICAgICAgIF92bS5fdigiTUh6ICIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiXzNkNHdxSjVicFkiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8xWkMtajU0dEdQIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8zMllhRWpJaVNvIiB9LCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiVW5pdGVkIFN0YXRlcyIpXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8yWDVBcG9LZjFNIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI5MTUgIiksCiAgICAgICAgICAgICAgX3ZtLl92KCJNSHogIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzNEODBaT0cydWkiIH0sIFsKICAgICAgX2MoImxhYmVsIiwgeyBzdGF0aWNDbGFzczogIl8yYmdUdXZTZkNlIiwgYXR0cnM6IHsgZm9yOiAicm91dGVyIiB9IH0sIFsKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMjdnaGFLOUlNdyIgfSwgW192bS5fdigi6Lev55Sx5ZmoICIpXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfM2JvTTRLUFZ4LSIgfSwgWwogICAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAi5Li65oKo55qE572R5YWz6YCJ5oup5LiA5Liq5bCG6KaB6L+e5o6l55qE6Lev55Sx5Zmo77yM5Li65LqG5YeP5bCR5pe25bu277yM6K+36YCJ5oup5LiO5oKo55qE572R5YWz5L2N572u6L6D6L+R55qE5Yy65Z+f5YaF55qE6Lev55Sx5Zmo44CCICIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMU5tQkROM1l2RyIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFhTDU3T0hIZEIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFIbHZpVXREV2sgXzZlbHQ5QnVmNVcgXzNYU1lFck9YQlQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJTYVkyNjFxOHBrIiB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJZR0Q5RmZZMGs1IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfNXMzRXhjZ3VPSCIgfSwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzN3T2ktZ0EzMVAiIH0pLAogICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIl8zenhUOUtUWmk1IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAicm91dGVyIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIiIsCiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICIiLAogICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogIm5vbmUiLAogICAgICAgICAgICAgICAgICAgIGF1dG9jb3JyZWN0OiAib2ZmIiwKICAgICAgICAgICAgICAgICAgICBhdXRvY2FwaXRhbGl6ZTogIm9mZiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMmVpcGxQSnFFMiIgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMVN6dFVuNnNqTiIgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFhMms5UTFmVkQiIH0pLAogICAgICAgICAgICBfYygic3BhbiIsIFtfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8xdjgySEhBQjVWIiB9KV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJfMUlpWXhxbTdTcCIgfSwgWwogICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiXzF2bzN2dkRZNVAgWkVfZVpiTDI1WiIgfSwgWwogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8yWTE4cF9vUFpjIiB9LCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJPUW5rcUZPWWxZIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiZGlnaXRhbGNhdGFwdWx0LXVrLXJvdXRlciIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8zSjlKSWZ1akppIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi5YWs5pyJICIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzZUZEMtSGMzNnIiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJ0dG4udGhpbmdzY29ubmVjdGVkLm5ldCIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiXzF2bzN2dkRZNVAiIH0sIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMlkxOHBfb1BaYyIgfSwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiT1Fua3FGT1lsWSIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIm1lc2hlZC1yb3V0ZXIiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM0o5SklmdWpKaSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIuWFrOaciSAiKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl82VGRDLUhjMzZyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigidGhldGhpbmdzLm1lc2hlZC5jb20uYXUiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogIl8xdm8zdnZEWTVQIiB9LCBbCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzJZMThwX29QWmMiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIk9RbmtxRk9ZbFkiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJzd2l0Y2gtcm91dGVyIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzNKOUpJZnVqSmkiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLlhazmnIkgIildKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfNlRkQy1IYzM2ciIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoInR0bi5vcGVubmV0d29ya2luZnJhc3RydWN0dXJlLm9yZyIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiXzF2bzN2dkRZNVAiIH0sIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMlkxOHBfb1BaYyIgfSwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiT1Fua3FGT1lsWSIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoInR0bi1yb3V0ZXItYXNpYS1zZSIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8zSjlKSWZ1akppIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi5YWs5pyJICIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzZUZEMtSGMzNnIiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJhc2lhLXNlLnRoZXRoaW5ncy5uZXR3b3JrIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJfMXZvM3Z2RFk1UCIgfSwgWwogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8yWTE4cF9vUFpjIiB9LCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJPUW5rcUZPWWxZIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigidHRuLXJvdXRlci1icmF6aWwiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM0o5SklmdWpKaSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIuWFrOaciSAiKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl82VGRDLUhjMzZyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiYnJhemlsLnRoZXRoaW5ncy5uZXR3b3JrIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJfMXZvM3Z2RFk1UCIgfSwgWwogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8yWTE4cF9vUFpjIiB9LCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJPUW5rcUZPWWxZIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigidHRuLXJvdXRlci1ldSIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8zSjlKSWZ1akppIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi5YWs5pyJICIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzZUZEMtSGMzNnIiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJldS50aGV0aGluZ3MubmV0d29yayIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiXzF2bzN2dkRZNVAiIH0sIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMlkxOHBfb1BaYyIgfSwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiT1Fua3FGT1lsWSIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoInR0bi1yb3V0ZXItanAiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM0o5SklmdWpKaSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIuWFrOaciSAiKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl82VGRDLUhjMzZyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiYXNpYS1zZS50aGV0aGluZ3MubmV0d29yayIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAiXzF2bzN2dkRZNVAiIH0sIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMlkxOHBfb1BaYyIgfSwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiT1Fua3FGT1lsWSIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoInR0bi1yb3V0ZXItdXMtd2VzdCIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8zSjlKSWZ1akppIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi5YWs5pyJICIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzZUZEMtSGMzNnIiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJ1cy13ZXN0LnRoZXRoaW5ncy5uZXR3b3JrIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8zdDdLVFh1b0ZOIiB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfM0Q4MFpPRzJ1aSIgfSwgWwogICAgICBfYygibGFiZWwiLCB7IHN0YXRpY0NsYXNzOiAiXzJiZ1R1dlNmQ2UiLCBhdHRyczogeyBmb3I6ICJsb2NhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzI3Z2hhSzlJTXciIH0sIFtfdm0uX3YoIuWumuS9jSAiKV0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzNib000S1BWeC0iIH0sIFsKICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIuivt+mAieaLqeaCqOeahOe9keWFs+aJgOWkhOeahOeyvuehruWumuS9je+8jOWmguS4jeaMh+Wumu+8jOWImeWwhumAieeUqOS7peS4i+m7mOiupOWumuS9jeOAguaCqOWPr+S7pemAmui/h+eCueWHu+S4i+aWueWcsOWbvuadpeiuvuWumue9keWFs+WumuS9jeOAgiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzFObUJETjNZdkciIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl84ZU52NFdNb1cxIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjEwMCUiLAogICAgICAgICAgICAgICAgbWFyZ2luOiAiMHB4IiwKICAgICAgICAgICAgICAgIHBhZGRpbmc6ICIwcHgiLAogICAgICAgICAgICAgICAgcG9zaXRpb246ICJyZWxhdGl2ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTAwJSIsCiAgICAgICAgICAgICAgICAgIGxlZnQ6ICIwcHgiLAogICAgICAgICAgICAgICAgICB0b3A6ICIwcHgiLAogICAgICAgICAgICAgICAgICBtYXJnaW46ICIwcHgiLAogICAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMHB4IiwKICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICJhYnNvbHV0ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNTAlIiwKICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICI1MCUiLAogICAgICAgICAgICAgICAgICAgIGxlZnQ6ICI1MCUiLAogICAgICAgICAgICAgICAgICAgIHRvcDogIjUwJSIsCiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAiMHB4IiwKICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMHB4IiwKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTAwJSIsCiAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAiMHB4IiwKICAgICAgICAgICAgICAgICAgICAgIHRvcDogIjBweCIsCiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46ICIwcHgiLAogICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogIjBweCIsCiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM3JScHdiWnBPaSIgfSwgWwogICAgICAgICAgICBfYygibGFiZWwiLCB7IHN0YXRpY0NsYXNzOiAiXzFMQXFFTldrM0YiLCBhdHRyczogeyBmb3I6ICJsYXQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigibGF0ICIpLAogICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICJudW1iZXIiLAogICAgICAgICAgICAgICAgICBzdGVwOiAiMC4wMDEiLAogICAgICAgICAgICAgICAgICBuYW1lOiAibGF0IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIiLAogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIjAuMDAwMDAwMDAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsYWJlbCIsIHsgc3RhdGljQ2xhc3M6ICJfMUxBcUVOV2szRiIsIGF0dHJzOiB7IGZvcjogImxuZyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJsbmcgIiksCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdHlwZTogIm51bWJlciIsCiAgICAgICAgICAgICAgICAgIHN0ZXA6ICIwLjAwMSIsCiAgICAgICAgICAgICAgICAgIG5hbWU6ICJsbmciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIiIsCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiMC4wMDAwMDAwMCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMjU3UWl1ZEprciIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiXzI2TDBmMlVpdEMgdTFkYXREdkt0MCBfMlYzczNaT0l4ZCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiAi5YiH5o2i5Y2r5pifIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIl8zVVpfdDc3cmpLIF8yOUE4UlFicndTIGlvbiBpb24tbWFwIgogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzNHY09WVWp4a3oiIH0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIl8za25VLVZfTEtsIHUxZGF0RHZLdDAgXzJWM3MzWk9JeGQiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIuiBmueEpuWcqOaIkeeahOS9jee9riIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJfM1VaX3Q3N3JqSyBfMjlBOFJRYnJ3UyBpb24gaW9uLXBlcnNvbiIKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8zR2NPVlVqeGt6IiB9KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJfMjAyX2ZmMkI3ZyB1MWRhdER2S3QwIF8yVjNzM1pPSXhkIEVVdHA5cFhSODIiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIuiBmueEpuWcqOaMh+mSiOS9jee9riIsIGRpc2FibGVkOiAiIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIl8zVVpfdDc3cmpLIF8yOUE4UlFicndTIGlvbiBpb24tbG9jYXRpb24iCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM0djT1ZVanhreiIgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZ2ZRWWZZSlcwXyB1MWRhdER2S3QwIF8yVjNzM1pPSXhkIEVVdHA5cFhSODIiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIua4hemZpOWumuS9jSIsIGRpc2FibGVkOiAiIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIl8zVVpfdDc3cmpLIF8yOUE4UlFicndTIGlvbiBpb24tY2xvc2UtY2lyY2xlZCIKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8zR2NPVlVqeGt6IiB9KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMnZEMW1lYllBTSIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiXzdEMTAzNzB3NnMgdTFkYXREdkt0MCBfMlYzczNaT0l4ZCIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJfM1VaX3Q3N3JqSyBfMjlBOFJRYnJ3UyBpb24gaW9uLXBsdXMiCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIl8zR2NPVlVqeGt6IiB9KQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIl8yOTI0a19yV3NEIHUxZGF0RHZLdDAgXzJWM3MzWk9JeGQiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiXzNVWl90NzdyaksgXzI5QThSUWJyd1MgaW9uIGlvbi1taW51cyIKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzNHY09WVWp4a3oiIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfM3Q3S1RYdW9GTiIgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzNEODBaT0cydWkiIH0sIFsKICAgICAgX2MoImxhYmVsIiwgeyBzdGF0aWNDbGFzczogIl8yYmdUdXZTZkNlIiwgYXR0cnM6IHsgZm9yOiAicGxhY2VtZW50IiB9IH0sIFsKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJfMjdnaGFLOUlNdyIgfSwgW192bS5fdigi5aSp57q/5pS+572u5Zy65omAICIpXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfM2JvTTRLUFZ4LSIgfSwgWwogICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLnvZHlhbPlpKnnur/nmoTmlL7nva7loLTmiYAgIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8xTm1CRE4zWXZHIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMm5haUVIMVgxRyIgfSwgWwogICAgICAgICAgX2MoImJ1dHRvbiIsIHsgc3RhdGljQ2xhc3M6ICJfMjVqN28zdHFGTSIgfSwgWwogICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIuWupOWGhSAiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJidXR0b24iLCB7IHN0YXRpY0NsYXNzOiAiXzI1ajdvM3RxRk0iIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLlrqTlpJYgIildKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzN0N0tUWHVvRk4iIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIl8yMEE5UWdsRjFlIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInUxZGF0RHZLdDAgXzJTZVFMR1VleXkiLAogICAgICAgICAgYXR0cnM6IHsgaHJlZjogImh0dHBzOi8vY29uc29sZS50aGV0aGluZ3NuZXR3b3JrLm9yZy9nYXRld2F5cyIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzNHY09WVWp4a3oiIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLlj5bmtoggIildKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJidXR0b24iLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAidTFkYXREdkt0MCBfMlpHc0tVYUR6UCBFVXRwOXBYUjgyIiwKICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJzdWJtaXQiLCBkaXNhYmxlZDogIiIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiXzNHY09WVWp4a3oiIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLms6jlhoznvZHlhbMgIildKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJmb290ZXIiLCB7IHN0YXRpY0NsYXNzOiAiXzJNMGItckZQU2wiIH0sIFsKICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgX3ZtLl92KCLnlKjmiLflsLHmmK/miJHku6znmoTnvZHnu5zvvIzorqnmiJHku6zkuIDotbflu7rorr7ohb7orq/nianogZTnvZHlvIDlj5HogIXnpL7ljLogIikKICAgICAgXSksCiAgICAgIF92bS5fdigiIOKAlCAiKSwKICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJodHRwOi8vdGhldGhpbmdzbmV0d29yay5vcmcvIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlRoZSBUaGluZ3MgTmV0d29yayIpCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2Iiwge30sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfM0MtZ3I5UUJyMyIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzNOQm1uNW43UHQiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiXzJPbmZiMnJuVzQiIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJfMTRHSl9RbHBmeSIgfSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}